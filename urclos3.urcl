// THIS IS A BETA AND BUGS WILL BE PRESENT

// URCL OS v3.0.0

// Whats new in v3.0.0:
// Rewrite of all systemcalls
// Multithreading
// Memory management
// Slight change in IL
// Proper FS interaction

// Whats next:
// More system utils
// More system calls
// Reorganization and optimization

//HEADERS
BITS >= 16
MINREG 8
MINHEAP 4096
MINSTACK 16

.Initialize
OUT %ADDR 7 //load address of what should be the file executed on startup, if you delete this file you are dead dead on god
IN R4 %BUS
BRZ .Initialize_NoBoot R4
STR .OSVar_STARTUPPROG R4
STR .OSVar_MALLOCSADDR M0

.Initialize_Memory
SUB R5 @MINHEAP 2
BGE .Initialize_ManyMemories R5 @SMAX
STR M0 R5
DEC R5 @MINHEAP
LSTR M0 R5 -1
JMP .CreateStartingProc

.Initialize_ManyMemories
DEC R5 @SMAX
STR M0 R5
SUB R5 @MINHEAP @MSB
DEC R5 R5
DEC R6 @MSB
LSTR M0 R6 R5
DEC R5 @MINHEAP
LSTR M0 R5 -1
JMP .CreateStartingProc

.Initialize_NoBoot
OUT %TEXT 'E'
OUT %TEXT 'r'
OUT %TEXT 'r'
OUT %TEXT 'o'
OUT %TEXT 'r'
RET

.InstructionTable
DW .Ins_Nop
DW .Ins_Immediate // 1
DW .Ins_Add // 2
DW .Ins_Subtract // 3
DW .Ins_And // 4
DW .Ins_Nor // 5
DW .Ins_ShiftLeft // 6
DW .Ins_ShiftRight // 7
DW .Ins_BranchIfGreaterThanOrEqual // 8
DW .Ins_BranchIfEqual // 9
DW .Ins_LoadMemory // 10
DW .Ins_StoreMemory // 11
DW .Ins_Push // 12
DW .Ins_Pop // 13
DW .Ins_BulkImmediate //14
DW .Ins_SystemCall //15

.SystemCalls
DW .Scal_Exit //0
DW .Scal_Creat //1
DW .Scal_Open //2
DW .Scal_Close //3
DW .Scal_Read //4
DW .Scal_Write //5
DW .Scal_Lseek //6
DW .Scal_Error //.Scal_Link //7
DW .Scal_Error //.Scal_Unlink //8
DW .Scal_Error //.Scal_Stat //9
DW .Scal_Exec //10
DW .Scal_Fork //11
DW .Scal_GetPID //12
DW .Scal_WaitPID //13
 DW .Scal_Error//DW .Scal_Kill //14
DW .Scal_Chdir // //15
DW .Scal_Error //.Scal_Stime //16
DW .Scal_Error //.Scal_time //17
DW .Scal_Rdir //18
DW .Scal_Malloc //19
DW .Scal_Free //20
DW .Scal_Realloc //21
DW .Scal_Puts //22
DW .Scal_Putc //23
DW .Scal_Putci //24
DW .Scal_Gets //25
DW .Scal_Getc //26
DW .Scal_Error //.Scal_Memcmp //27
DW .Scal_Error //.Scal_Memcpy //28
DW .Scal_Error //.Scal_Rand //29
DW .Scal_Error //.Scal_Strcmp //30
DW .Scal_Error //.Scal_Strcpy //31
DW .Scal_Strlen //32
DW .Scal_Lodosvar //33
DW .Scal_Strosvar //34
DW .Scal_Getdirname //35
DW .Scal_NthString //36
DW .Scal_Flen //37
//OSVariables:
.OSVar_CWD
DW 0 //CWD
.OSVar_ROOT
DW 0
.OSVar_PATH
DW 0 //configured on startup (/bin)
.OSVar_SHELL
DW 0 //configured on startup (/bin/sh)
.OSVar_ECHO
DW 1
.OSVar_MEMLIMIT
//DW @HEAP
DW @MINHEAP //use this on bad emu that no have @HEAP (I am looking at you bram)
.OSVar_BITS
DW @BITS
.OSVar_MEM0
DW M0
.OSVar_MALLOCSADDR
DW M0
.OSVar_USERNAME
DW @MAX //configured on startup
.OSVar_SEEKOFFSET
DW 0
.OSVar_CPP
DW 0
.OSVar_PROCNAME
DW 0 //write only
.OSVar_EXIT
DW 0
.OSVar_STARTUPPROG
DW 0
.OSVar_ERROR
DW 0

//0 = successful
//1 = other
//2 = invalid directory
//3 = invalid operand
//4 = out of memory
//5 = out of disk space
//6 = invalid systemcall
//7 = invalid fd
//8 = invalid pid
//9 = substring not found
//10 = stack overflow
//11 = stack underflow
//12 = too many open files
//13 = invalid lseek offset
//14 = EOF

.OSVar_Restricted_EndingString
DW [10 "halting..." 10 0]
.OSVar_Restricted_CurrentFinalProc
DW .ProcessDescriptors
.OSVar_Restricted_NextPID
DW 1
.OSVar_Restricted_Temp
DW 0
.OSVar_Restricted_Temp2
DW 0

.VirtualRegisters
DW 0 //0
DW 0 //1
DW 0 //2
DW 0 //3
DW 0 //4
DW 0 //5
DW 0 //6
DW 0 //7
DW 0 //8
DW 0 //9
DW 0 //A
DW 0 //B
DW 0 //C
DW 0 //D
DW 0 //E
.VirtualRegisters_StackPointer
DW 0 //F
DW 0 //secret register for translations to use shhhhh

.FileDescriptors
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW -1
//below is not file descriptor
DW 0
.ProcessDescriptors //pointers to them
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0

//Process descriptor format:
//PID
//Start of program
//Name of program (string pointer)
//Current read address
//Seek value
//Stack location
//Error status
//Registers (1-15)

//Memory Block format:
//@MSB = allocated?
//Rest = length

//File descriptor format:
//Seek address
//File header addr
//Current Segment end
//Remaining segments



//INSTRUCTIONS
//Op1 = R3
//Op2 = R2
//Op3 = R1
//PC = R4
//CurrentProc = R5
//R6 = R8 = temp
.Ins_Nop
RET

.Ins_Immediate
ADD R3 R3 .VirtualRegisters
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
STR R3 R6
RET

.Ins_Add
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
ADD R1 R2 R1
STR R3 R1
RET

.Ins_Subtract
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
SUB R1 R2 R1
STR R3 R1
RET

.Ins_And
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
AND R1 R1 R2
STR R3 R1
RET

.Ins_Nor
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
NOR R1 R1 R2
STR R3 R1
RET

.Ins_ShiftLeft
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
BSL R1 R2 R1
STR R3 R1
RET

.Ins_ShiftRight
ADD R3 R3 .VirtualRegisters
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
BSR R1 R2 R1
STR R3 R1
RET

.Ins_BranchIfGreaterThanOrEqual
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
BRL .Ins_BranchIfGreaterThanOrEqual_NoBranch R2 R1
ADD R3 R3 .VirtualRegisters
LOD R3 R3
LOD R6 R5 //pd pointer
LLOD R6 R6 1 //load start of program
ADD R4 R6 R3 //branc
DEC R4 R4
.Ins_BranchIfGreaterThanOrEqual_NoBranch
RET

.Ins_BranchIfEqual
ADD R2 R2 .VirtualRegisters
ADD R1 R1 .VirtualRegisters
LOD R2 R2
LOD R1 R1
BNE .Ins_BranchIfEqual_NoBranch R2 R1
ADD R3 R3 .VirtualRegisters
LOD R3 R3
LOD R6 R5 //pd pointer
LLOD R6 R6 1 //load start of program
ADD R4 R6 R3 //branc
DEC R4 R4
.Ins_BranchIfEqual_NoBranch
RET

.Ins_LoadMemory
ADD R2 R2 .VirtualRegisters
ADD R3 R3 .VirtualRegisters
LOD R2 R2
CPY R3 R2
RET

.Ins_StoreMemory
ADD R2 R2 .VirtualRegisters
ADD R3 R3 .VirtualRegisters
LOD R3 R3
CPY R3 R2
RET

.Ins_Push
ADD R3 R3 .VirtualRegisters
LOD R3 R3
LOD R6 R5
LLOD R7 R6 5 //stack location
BRZ .Ins_Push_CreateStack R7
ADD R8 R7 64 //R8 = stack cap
LLOD R6 .VirtualRegisters 15
BGE .Ins_Push_StackOverflow R6 R8
BRL .Ins_Push_StackUnderflow R6 R7
.Ins_Push_CreateStack_Ret
INC R6 R6
STR R6 R3
LSTR .VirtualRegisters 15 R6
RET

.Ins_Push_CreateStack
LSTR .VirtualRegisters 16 64
PSH R3
IMM R3 16
PSH R6
CAL .Scal_Malloc
POP R6
POP R3
LLOD R7 .VirtualRegisters 16 //address
DEC R7 R7
LSTR R6 5 R7
MOV R6 R7
JMP .Ins_Push_CreateStack_Ret


.Ins_Push_StackOverflow
STR .OSVar_ERROR 10
RET

.Ins_Push_StackUnderflow
STR .OSVar_ERROR 11
RET

.Ins_Pop
LOD R6 R5
LLOD R6 R6 5 //stack location
BRZ .Ins_Push_StackUnderflow R6
ADD R7 R6 64
LLOD R8 .VirtualRegisters 15
BRG .Ins_Push_StackOverflow R8 R7
BLE .Ins_Push_StackUnderflow R8 R6
ADD R3 R3 .VirtualRegisters
CPY R3 R8
DEC R8 R8
LSTR .VirtualRegisters 15 R8
RET

.Ins_BulkImmediate
ADD R3 R3 .VirtualRegisters
LOD R3 R3
.Ins_BulkImmediate_Loop
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
STR R3 R6
INC R3 R3
BNZ .Ins_BulkImmediate_Loop R6
RET

.Ins_SystemCall
BSL R2 R2 4
OR R1 R1 R2
BRG .Ins_SystemCall_InvalidSyscall R1 37
LLOD R1 R1 .SystemCalls
CAL R1
CAL .ContextSwitch
RET

.Ins_SystemCall_InvalidSyscall
STR .OSVar_ERROR 6
RET

//SYSTEM CALLS
//R1 + R2 = temp
//Operand = R3
//PC = R4
//CurrentProc = R5
//R6 - R8 = temp

.Scal_Exit
ADD R3 R3 .VirtualRegisters
LOD R3 R3 //exit code
PSH R5
PSH R3
LOD R3 R5
DEC R3 R3
CAL .Scal_Free_SkipGet
POP R3
POP R5
STR .OSVar_EXIT R3
DEC R5 R5
LOD R1 R5 //the one before
INC R5 R5
BRZ .END R1
LOD R1 .OSVar_Restricted_CurrentFinalProc
DEC R1 R1
STR .OSVar_Restricted_CurrentFinalProc R1
INC R1 R1
LOD R2 R1
STR R5 R2 //puts last into current
STR R1 0
//IMM R5 .ProcessDescriptors
RET

.Scal_Creat
ADD R3 R3 .VirtualRegisters
LOD R3 R3 //pointer to name string
//get length
IMM R1 -2
PSH R3
.Scal_Creat_NameLoop
LOD R2 R3
INC R3 R3
INC R1 R1
BNZ .Scal_Creat_NameLoop R2
BRP ~+2 R1
MOV R1 R0 //in case someone trys to name a file "\0"
ADD R3 R1 20
PSH R4
CAL .FindNextSpace
MOV R3 R4
POP R4
ADD R3 R3 3
OUT %ADDR R3
IN R6 %BUS
ADD R6 R6 R1
OUT %BUS R6 //
STR .OSVar_Restricted_Temp R6
DEC R3 R3
OUT %ADDR R3
OUT %BUS 16 //
DEC R3 R3
OUT %ADDR R3
OUT %BUS 0 //
DEC R3 R3
POP R6
BSL R7 R1 8
LOD R8 R6
ADD R7 R7 R8
OUT %ADDR R3
OUT %BUS R7 //
STR .OSVar_Restricted_Temp2 R7
ADD R3 R3 4
INC R6 R6
.Scal_Creat_SetNameLoop
BRZ .Scal_Creat_SetNameLoop_End R1
LOD R8 R6
OUT %ADDR R3
OUT %BUS R8
INC R6 R6
INC R3 R3
DEC R1 R1
JMP .Scal_Creat_SetNameLoop
.Scal_Creat_SetNameLoop_End
//expand CWD and insert
IMM R7 0
LOD R3 .OSVar_CWD
.Scal_Creat_UpdateDirLoop
//follow chain to find final block
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
//  check for remaining block header bit
BSR R6 R6 2
//      false -> end loop
BRZ .Scal_Creat_UpdateDirLoop_End R6
//      true -> go to end and get next header
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
INC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R6 R6 R7
DEC R6 R6
OUT %ADDR R6
IN R3 %BUS
INC R7 R7
JMP .Scal_Creat_UpdateDirLoop
.Scal_Creat_UpdateDirLoop_End
//set header in final block to mark it as not being final
IN R6 %BUS
OR R6 R6 4
OUT %BUS R6
BNZ .Scal_Creat_NotFirst R7
BRE .Scal_Creat_NotFirst R3 1
//  if block is first and addr != 0, subtract dir name length from addr (can be found from first thing in header)
DEC R3 R3
OUT %ADDR R3
IN R6 %BUS
BSR R6 R6 8
SUB R3 R3 R6
SUB R3 R3 3
OUT %ADDR R3
IN R6 %BUS
OR R6 R6 4
OUT %BUS R6
.Scal_Creat_NotFirst 
//FNS(9)
PSH R3
IMM R3 9
PSH R4
CAL .FindNextSpace
MOV R8 R4
POP R4
POP R3
//end of block = header
ADD R3 R3 2 //points to starting addr
OUT %ADDR R3
IN R6 %BUS
DEC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R6 R6 R7
DEC R6 R6 //last word
OUT %ADDR R6
OUT %BUS R8
//header[0] = '.'
OUT %ADDR R8
OUT %BUS '.'
//header[1] = 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
//header[2] = 5
INC R8 R8
OUT %ADDR R8
OUT %BUS 5
//header[3] = header+4
INC R8 R8
OUT %ADDR R8
INC R8 R8
OUT %BUS R8
//header[4,5,6,7] = stuff from earlier
OUT %ADDR R8
LOD R6 .OSVar_Restricted_Temp2
OUT %BUS R6
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 16
INC R8 R8
OUT %ADDR R8
LOD R6 .OSVar_Restricted_Temp
OUT %BUS R6
//header[8] = 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
RET

.Scal_Open
PSH R4
PSH R3
ADD R3 R3 .VirtualRegisters
PSH ~+3
PSH R3
JMP .Scal_Rdir_SkipSetup
//find next fd
IMM R1 .FileDescriptors
.Scal_Open_Loop
LOD R2 R1
INC R1 R1
BNZ .Scal_Open_Loop R2
BRE .Scal_Open_Error R2 -1
DEC R1 R1
POP R3
ADD R3 R3 .VirtualRegisters
SUB R2 R1 .FileDescriptors
STR R3 R2
IMM R3 16
LSTR .VirtualRegisters 16 4
PSH R1
CAL .Scal_Malloc
POP R1
LLOD R4 .VirtualRegisters 16
STR R1 R4
MOV R1 R4
LOD R3 .OSVar_Restricted_Temp
OUT %ADDR R3
IN R4 %BUS //location
STR R1 R4
SUB R3 R3 3 //start of file header
LSTR R1 1 R3
INC R3 R3
OUT %ADDR R3
IN R2 %BUS
BSR R2 R2 2 //number of remaining segments
LSTR R1 3 R2
INC R3 R3
OUT %ADDR R3
IN R2 %BUS //size of segment
ADD R2 R2 R4
DEC R2 R2
LSTR R1 2 R2
POP R4
RET

.Scal_Open_Error
STR .OSVar_ERROR 12
RET

.Scal_Close
ADD R3 R3 .VirtualRegisters
LOD R3 R3
ADD R3 R3 .FileDescriptors
LOD R1 R3
BRZ .Scal_Close_Error R1
DEC R1 R1
LOD R2 R1
AND R2 R2 @SMAX
STR R1 R2
INC R1 R1
STR R3 R0
RET

.Scal_Close_Error
STR .OSVar_ERROR 7
RET

.Scal_Read
ADD R3 R3 .VirtualRegisters
LOD R3 R3
PSH R3
ADD R3 R3 .FileDescriptors
LOD R1 R3 //fd to read from
IMM R3 16
PSH R1
CAL .Ins_Pop
POP R1
LLOD R7 .VirtualRegisters 16 //mem dest location
IMM R3 16
PSH R1
PSH R7
CAL .Ins_Pop
POP R7
POP R1
LLOD R6 .VirtualRegisters 16 //amount to read
BRZ .Scal_Close_Error R1
POP R3
BGE .Scal_Close_Error R3 16
.Scal_Read_Big_Loop
LOD R2 R1 //seek addr
LLOD R3 R1 2 //segment end
LLOD R8 R1 3 //segments remaining?
BRZ ~+2 R8
DEC R3 R3
ADD R8 R2 R6 //new seek address after
BRG .Scal_Read_NoFullRead R8 R3 //too smol
STR .OSVar_SEEKOFFSET R8
STR R1 R8
MOV R3 R8 //ending address
STR .OSVar_Restricted_Temp R6
//while (R2 <= R3) {
.Scal_Read_Loop
OUT %ADDR R2
IN R8 %BUS
STR R7 R8
INC R7 R7
INC R2 R2
BRL .Scal_Read_Loop R2 R3
LOD R3 .OSVar_Restricted_Temp
BNE .Scal_Read_NextSegment R3 R6
.Scal_Read_End
LSTR .VirtualRegisters 16 R3
IMM R3 16
CAL .Ins_Push
RET

.Scal_Read_NoFullRead
STR R7 0
INC R3 R3
STR R1 R3
STR .OSVar_SEEKOFFSET R3
SUB R8 R3 R2
STR .OSVar_Restricted_Temp R8
BNZ .Scal_Read_Loop R8
ADD R6 R6 R3
.Scal_Read_NextSegment
LLOD R8 R1 3
BRZ .Scal_Read_End R8
SUB R6 R6 R3 //remaining
STR .OSVar_Restricted_Temp R6
OUT %ADDR R2
IN R2 %BUS //new header
INC R2 R2
OUT %ADDR R2
IN R8 %BUS
BSR R8 R8 2
LSTR R1 3 R8 //remaining segment
INC R2 R2
OUT %ADDR R2
IN R8 %BUS //segment length
INC R2 R2
OUT %ADDR R2
IN R3 %BUS //segment start
STR R1 R3 //new seek
ADD R3 R3 R8
DEC R3 R3
LSTR R1 2 R3
JMP .Scal_Read_Big_Loop

.Scal_Write
PSH R4
//LOD DST
ADD R3 R3 .VirtualRegisters
LOD R3 R3
ADD R3 R3 .FileDescriptors
LOD R1 R3 //fd to read from
//LOD SRC
IMM R3 16
PSH R1
CAL .Ins_Pop
POP R1
LLOD R2 .VirtualRegisters 16
//LOD AMOUNT
IMM R3 16
PSH R1
PSH R2
CAL .Ins_Pop
POP R2
POP R1
LLOD R3 .VirtualRegisters 16
//PTR = DST.START
LLOD R4 R1 1
ADD R7 R4 3
OUT %ADDR R7
IN R4 %BUS
//IF SEEK + AMOUNT >= PTR + DST.LEN THEN1
.Scal_Write_Next
LOD R6 R1 //seek
ADD R6 R6 R3
DEC R7 R7
OUT %ADDR R7
IN R7 %BUS
ADD R7 R4 R7
STR .OSVar_Restricted_Temp 0
BRL .Scal_Write_NoFrag R6 R7
//  AMOUNT = DST.END - SEEK
LLOD R6 R1 2
LLOD R7 R1 3
BRZ ~+2 R7
DEC R6 R6
LOD R7 R1
SUB R6 R6 R7
//  REMAINING = AMOUNT - NEWAMOUNT
SUB R8 R3 R6
MOV R3 R6
INC R3 R3
STR .OSVar_Restricted_Temp 1
//  CREATFRAG = TRUE
.Scal_Write_NoFrag
//PTR = SEEK
//WHILE PTR < SEEK + AMOUNT
LOD R4 R1
ADD R7 R4 R3
.Scal_Write_Loop
//  CPY PTR SRC
OUT %ADDR R4
LOD R6 R2
OUT %BUS R6
//  INC SRC SRC
INC R2 R2
//  INC PTR PTR
INC R4 R4
BRL .Scal_Write_Loop R4 R7
//LSEEK = PTR
STR R1 R4
LOD R6 .OSVar_Restricted_Temp //creatfrag
BRZ .Scal_Write_End R6
//IF CREATFRAG
//  IF frag exists
LLOD R6 R1 3
BRZ .Scal_Write_NoFragExists R6
OUT %ADDR R4
IN R6 %BUS
INC R6 R6
OUT %ADDR R6
IN R7 %BUS
BSR R7 R7 2
LSTR R1 3 R7
INC R6 R6
OUT %ADDR R6
IN R7 %BUS
INC R6 R6
OUT %ADDR R6
IN R6 %BUS
ADD R7 R7 R6
DEC R7 R7
LSTR R1 2 R7
STR R1 R6
JMP .Scal_Write_FragExists_Return
//  ELSE
//      UPDATE THE ORIGINAL HEADERS
.Scal_Write_NoFragExists
LLOD R4 R1 1
INC R4 R4
.Scal_Write_CreatFrag_FindEnd
OUT %ADDR R4
IN R3 %BUS
BSR R3 R3 2
BRZ .Scal_Write_CreatFrag_FindEnd_End R3
INC R4 R4
OUT %ADDR R4
IN R3 %BUS
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R3 R3 R4
DEC R3 R3
OUT %ADDR R3
IN R4 %BUS
INC R4 R4
JMP .Scal_Write_CreatFrag_FindEnd
.Scal_Write_CreatFrag_FindEnd_End
IN R3 %BUS //update dir header
OR R3 R3 4
OUT %BUS R3
//update actual header
MOV R6 R4
DEC R6 R6
OUT %ADDR R6
IN R3 %BUS
BSR R3 R3 8
ADD R3 R3 3
ADD R6 R6 3
OUT %ADDR R6
IN R6 %BUS
SUB R6 R6 R3
OUT %ADDR R6
IN R3 %BUS
OR R3 R3 4
OUT %BUS R3
//
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R7 %BUS
ADD R7 R6 R7
DEC R7 R7 //pointer to last word

OUT %ADDR R7
IN R6 %BUS
//      FNS(5+REMAINING)
ADD R3 R8 5
PSH R3
PSH R8
PSH R6
PSH R7
PSH R2
CAL .FindNextSpace
POP R2
POP R7
POP R6
POP R8
POP R3
SUB R3 R3 5
//      REPLACE LAST WORD WITH RESULT
OUT %ADDR R7
OUT %BUS R4
//      SET HEADERS
OUT %ADDR R4
OUT %BUS '.'
INC R4 R4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
OUT %ADDR R4
INC R8 R8
OUT %BUS R8
DEC R8 R8
INC R4 R4
OUT %ADDR R4
INC R4 R4
OUT %BUS R4
//      SET FIRST WORD TO LAST WORD OF PREVIOUS
OUT %ADDR R4
OUT %BUS R6
//  UPDATE SEEK
INC R4 R4
STR R1 R4
SUB R4 R4 4
LSTR R1 1 R4
ADD R4 R4 4
LSTR R1 3 0
//  UPDATE FD
ADD R6 R4 R8
LSTR R1 2 R6
.Scal_Write_FragExists_Return
//  AMOUNT = REMAINING
MOV R3 R8
//  JUMP BACK TO .Scal_Write_NoFrag WITH REMAINING AS NEW AMOUNT, CREATFRAG AS FALSE
STR .OSVar_Restricted_Temp 0
LLOD R4 R1 1
ADD R7 R4 3
JMP .Scal_Write_Next
.Scal_Write_End
POP R4
RET

.Scal_Lseek
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R1 .VirtualRegisters 16 //file
ADD R1 R1 .FileDescriptors
LOD R1 R1
LOD R2 R1
POP R3
ADD R3 R3 .VirtualRegisters
LOD R3 R3 //offset
PSH R2
//check if negative offset
.Scal_Lseek_Loop
LOD R2 SP
ADD R2 R2 R3
//check if exceeds end of fragment
LLOD R3 R1 2
LLOD R6 R1 3
BRZ ~+2 R6
DEC R3 R3
BLE .Scal_Lseek_End R2 R3
//check if remaining fragments
BRZ .Scal_Lseek_EOF R6
//get remaining amount
SUB R2 R2 R3
//go to next fragment if available
INC R3 R3
OUT %ADDR R3
IN R3 %BUS
//update fd
LSTR R1 1 R3
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
BSR R6 R6 2 //remaining seg
LSTR R1 3 R6
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
INC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R7 R7 R6
LSTR R1 2 R7
//next iteration
MOV R3 R2
JMP .Scal_Lseek_Loop
.Scal_Lseek_End
STR R1 R2
STR .OSVar_SEEKOFFSET R2
POP R0
RET

.Scal_Lseek_EOF
POP R0
STR .OSVar_ERROR 14 //EOF error
//TODO: make this jump to the end of the file
RET

.Scal_Exec
ADD R3 R3 .VirtualRegisters
LOD R4 R3
LOD R1 R5
LSTR R1 1 R4 //update start of program
DEC R4 R4
RET

.Scal_Fork
PSH R3
LOD R6 .OSVar_Restricted_NextPID
LSTR R3 .VirtualRegisters R6
INC R6 R6
STR .OSVar_Restricted_NextPID R6
IMM R3 16
LSTR .VirtualRegisters 16 22
CAL .Scal_Malloc
LLOD R3 .VirtualRegisters 16
LOD R7 .OSVar_Restricted_CurrentFinalProc
INC R7 R7
STR .OSVar_Restricted_CurrentFinalProc R7
STR R7 R3
LOD R6 .OSVar_Restricted_NextPID
DEC R6 R6
LOD R1 R5
STR R3 R6
INC R3 R3
INC R1 R1
CPY R3 R1
INC R3 R3
STR R3 R0
INC R3 R3
STR R3 R4
INC R3 R3
ADD R1 R1 3
CPY R3 R1
INC R1 R1
INC R3 R3
CPY R3 R1
INC R1 R1
INC R3 R3
CPY R3 R1
INC R3 R3
MOV R2 R0
ADD R1 .VirtualRegisters 1
.Scal_Fork_UpdateLoop
LOD R8 R1
STR R3 R8
INC R3 R3
INC R1 R1
INC R2 R2
BRL .Scal_Fork_UpdateLoop R2 15
POP R1
SUB R3 R3 16
LSTR R3 R1 R0
RET

.Scal_GetPID
ADD R3 R3 .VirtualRegisters
LOD R1 R5
CPY R3 R1 //haha I use that 1 cisc instruction noob
RET

.Scal_WaitPID
ADD R3 R3 .VirtualRegisters
LOD R3 R3
IMM R2 .ProcessDescriptors
.Scal_WaitPID_CheckForPIDLoop
LOD R1 R2
BRZ .Ins_Nop R1
LOD R1 R1
INC R2 R2
BNE .Scal_WaitPID_CheckForPIDLoop R1 R3
DEC R4 R4 //if process exists dont move onto next word
RET

.Scal_Chdir
ADD R3 R3 .VirtualRegisters
LOD R3 R3
STR .OSVar_CWD R3
RET

.Scal_Rdir
STR .OSVar_Restricted_Temp2 R4
ADD R3 R3 .VirtualRegisters
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R6 .VirtualRegisters 16 //R6 = default dir
BNE ~+2 R6 0xFFFF
.Scal_Rdir_SkipSetup
LOD R6 .OSVar_CWD
LOD R3 SP
LOD R3 R3
LOD R1 R3
PSH R0
BRZ .Scal_Rdir_BadDir R1
POP R0
BRE .Scal_Rdir_UseCWD R1 '.'
BRE .Scal_Rdir_UseRoot R1 '/'
JMP .Scal_Rdir_UseDefault

.Scal_Rdir_UseCWD
LOD R2 .OSVar_CWD
INC R3 R3
JMP .Scal_Rdir_Start

.Scal_Rdir_UseRoot
LOD R2 .OSVar_ROOT
INC R3 R3
JMP .Scal_Rdir_Start

.Scal_Rdir_UseDefault
MOV R2 R6
.Scal_Rdir_Start
ADD R2 R2 3
STR .OSVar_Restricted_Temp R2
OUT %ADDR R2
IN R1 %BUS //dir start
DEC R2 R2
OUT %ADDR R2
IN R4 %BUS
ADD R4 R4 R1
DEC R4 R4
SUB R2 R2 2
LOD R1 R3
INC R3 R3
BRZ .Scal_Rdir_FullPathInstant R1
BRE .Scal_Rdir_Start R1 '/'
DEC R3 R3
PSH R3
PSH R0
.Scal_Rdir_Loop
POP R0
LOD R3 SP
LOD R1 R3
OUT %ADDR R2
IN R6 %BUS
BRZ .Scal_Rdir_BadDir R6
BRE .Scal_Rdir_NextSeg R2 R4
ADD R2 R2 4
AND R7 R6 0xFF
PSH R0
BNE .Scal_Rdir_Loop R7 R1
INC R3 R3
POP R0
BSR R6 R6 8
DEC R1 R2
OUT %ADDR R1
STR .OSVar_Restricted_Temp R1
IN R7 %BUS //file addr
SUB R7 R7 R6
PSH R7
.Scal_Rdir_CheckDirLoop
LOD R1 R3
SETE R7 R1 R0
SETE R8 R1 '/'
OR R7 R7 R8
SETE R8 R1 0x20 //damn you bram I spent like 15 minutes debugging this until I learned that ' ' was broken
OR R7 R7 R8 //if this == -1 then is end of current dir name
SETE R8 R6 R0 //if this == -1 then is end of search dir name
XNOR R7 R7 R8 //if are not equal then there is no match
BRZ .Scal_Rdir_Loop R7
BRZ .Scal_Rdir_FullPathFound R1
BRE .Scal_Rdir_FullPathFound R1 0x20
BRE .Scal_Rdir_DirectoryFound R1 '/'
LOD R7 SP
OUT %ADDR R7
IN R7 %BUS
BNE .Scal_Rdir_Loop R1 R7
POP R7
INC R7 R7
PSH R7
INC R3 R3
DEC R6 R6
JMP .Scal_Rdir_CheckDirLoop

.Scal_Rdir_NextSeg
MOV R2 R6
ADD R2 R2 2
OUT %ADDR R2
IN R3 %BUS
INC R2 R2
OUT %ADDR R2
IN R4 %BUS
ADD R4 R4 R3
DEC R4 R4
INC R2 R2
PSH R0
JMP .Scal_Rdir_Loop

.Scal_Rdir_DirectoryFound
INC R3 R3
LOD R1 R3
BRZ .Scal_Rdir_FullPathFound R1 //if ends with a / because yeah people do that sometimes
DEC R4 R2
OUT %ADDR R4
IN R2 %BUS
DEC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R2
DEC R4 R4
POP R0
POP R0
PSH R3
PSH R0
JMP .Scal_Rdir_Loop

.Scal_Rdir_FullPathFound
DEC R2 R2
POP R0
POP R0
OUT %ADDR R2
IN R2 %BUS
.Scal_Rdir_FullPathInstant
POP R3 //original R3
STR R3 R2
LOD R4 .OSVar_Restricted_Temp2
RET

.Scal_Rdir_BadDir
STR .OSVar_ERROR 2
POP R0
POP R0
LOD R4 .OSVar_Restricted_Temp2
RET

.Scal_Malloc
ADD R3 R3 .VirtualRegisters
PSH R3
LOD R3 R3 //malloc size
BGE .Scal_Malloc_InvalidOp R3 @SMAX
LOD R1 .OSVar_MALLOCSADDR
PSH R0
.Scal_Malloc_Loop
MOV R7 R1
LOD R1 R1
BRE .Scal_Malloc_EOM R1 @MAX
AND R2 R1 @SMAX
AND R6 R1 @MSB
MOV R1 R7
BRZ .Scal_Malloc_Attempt R6
.Scal_Malloc_Attempt_Return
ADD R1 R1 R2
INC R1 R1
JMP .Scal_Malloc_Loop

.Scal_Malloc_Attempt
BRL .Scal_Malloc_Checkformerge R2 R3
OR R6 R3 @MSB
STR R1 R6
POP R0
POP R6
INC R1 R1
STR R6 R1 //return address of yeah
BRE .Scal_Malloc_Success R2 R3
ADD R1 R1 R3
SUB R2 R2 R3
DEC R2 R2
STR R1 R2
INC R1 R1
.Scal_Malloc_Success
DEC R1 R1
STR .OSVar_MALLOCSADDR R1
RET

.Scal_Malloc_Checkformerge
MOV R7 R1
ADD R1 R1 R2
INC R1 R1
LOD R6 R1
BRN .Scal_Malloc_Loop R6
ADD R2 R2 R6
INC R2 R2
BGE .Scal_Malloc_Loop R2 @SMAX //if combined are too big then don't merge
MOV R1 R7
STR R1 R2
JMP .Scal_Malloc_Loop

.Scal_Malloc_EOM
POP R1
BGE .Scal_Malloc_OOM R1 1
INC R1 R1
PSH R1
IMM R1 M0
JMP .Scal_Malloc_Loop

.Scal_Malloc_OOM
STR .OSVar_ERROR 4
POP R0
POP R0
RET

.Scal_Malloc_InvalidOp
STR .OSVar_ERROR 3
POP R0
POP R0
RET

.Scal_Free
ADD R3 R3 .VirtualRegisters
LOD R3 R3
DEC R3 R3
.Scal_Free_SkipGet
LOD R1 R3
AND R1 R1 @SMAX
STR R3 R1
RET

.Scal_Realloc
ADD R3 R3 .VirtualRegisters
PSH R3
LOD R3 R3 //size
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R6 .VirtualRegisters 16 //address
POP R3
DEC R6 R6
LOD R2 R6
AND R2 R2 0x7FFF
//if the new size is less than current size, then split
BRG .Scal_Realloc_expand R3 R2
SUB R2 R2 R3
DEC R2 R2
BRN .Scal_Realloc_end R2
OR R3 R3 0x8000
STR R6 R3
ADD R6 R6 R3
INC R6 R6
STR R6 R2
STR .OSVar_MALLOCSADDR R6
JMP .Scal_Realloc_end
//R7 = next part address
.Scal_Realloc_expand
ADD R7 R6 R2
INC R7 R7
LOD R8 R7
BRN .Scal_Realloc_Remalloc R8
SUB R1 R3 R2
DEC R1 R1
BRL .Scal_Realloc_Remalloc R8 R1
OR R3 R3 0x8000
STR R6 R3
BRE .Scal_Realloc_end R8 R3
ADD R7 R7 R1 //newaddr = nextaddr + R1 + 1
INC R7 R7 
STR .OSVar_MALLOCSADDR R7
SUB R8 R8 R1 //newsize = prevsize - R1 - 1
DEC R8 R8
STR R7 R8
.Scal_Realloc_end
POP R3
INC R6 R6
STR R3 R6
RET

.Scal_Realloc_Remalloc
PSH R6
PSH R2
LSTR .VirtualRegisters 16 R3
IMM R3 16
CAL .Scal_Malloc
LLOD R7 .VirtualRegisters 16
POP R2
POP R6
POP R3
STR R3 R7
//unalloc original (this should go after if I ever multithread the kernel but in this case it saves like 1 operation so)
STR R6 R2
//copy data
INC R6 R6
MOV R8 R7
.Scal_Realloc_CopyLoop
CPY R7 R6
INC R7 R7
INC R6 R6
DEC R2 R2
BNZ .Scal_Realloc_CopyLoop R2

RET

.Scal_Puts
ADD R3 R3 .VirtualRegisters
LOD R1 R3
CAL .PrintString
RET

.Scal_Putc
ADD R3 R3 .VirtualRegisters
LOD R3 R3
OUT %TEXT R3
RET

.Scal_Putci
INC R4 R4
OUT %ADDR R4
IN R3 %BUS
OUT %TEXT R3
RET

.Scal_Gets //TODO: make non blocking
ADD R3 R3 .VirtualRegisters
LOD R3 R3
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R2 .VirtualRegisters 16
IMM R3 16
CAL .Ins_Pop
LLOD R6 .VirtualRegisters 16
POP R3
BRZ .Scal_Gets_End R2
LOD R7 .OSVar_ECHO
.Scal_Gets_Loop
IN R1 %TEXT
BRE .Scal_Gets_End R1 R6
BRZ ~+2 R7
OUT %TEXT R1
STR R3 R1
INC R3 R3
DEC R2 R2
BNZ .Scal_Gets_Loop R2
.Scal_Gets_End
STR R3 R0
RET

.Scal_Getc //TODO: make non blocking
ADD R3 R3 .VirtualRegisters
IN R1 %TEXT
STR R3 R1
RET

.Scal_Strlen
ADD R8 R3 .VirtualRegisters
LOD R3 R8
IMM R1 -1
.Scal_Strlen_Loop
LOD R7 R3
INC R3 R3
INC R1 R1
BNZ .Scal_Strlen_Loop R7
STR R8 R1
RET

.Scal_Lodosvar
LLOD R3 .OSVar_CWD R3
LSTR .VirtualRegisters 16 R3
IMM R3 16
CAL .Ins_Push
RET

.Scal_Strosvar
MOV R1 R3
IMM R3 16
CAL .Ins_Pop
LLOD R3 .VirtualRegisters 16
LSTR .OSVar_CWD R1 R3
RET

.Scal_Getdirname
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R2 .VirtualRegisters 16 //max length
DEC R2 R2
POP R3
ADD R3 R3 .VirtualRegisters
LOD R3 R3
BRZ .Ins_Nop R2
LOD R1 .OSVar_CWD
ADD R6 R1 3
OUT %ADDR R6
IN R6 %BUS
OUT %ADDR R1
IN R1 %BUS
AND R7 R1 0xFF
STR R3 R7
INC R3 R3
STR R3 0
DEC R2 R2
BSR R1 R1 8
BRZ .Ins_Nop R1
SUB R6 R6 R1 //start of name
.Scal_Getdirname_Loop
BRZ .Ins_Nop R2
OUT %ADDR R6
IN R8 %BUS
STR R3 R8
DEC R2 R2
DEC R1 R1
INC R6 R6
INC R3 R3
STR R3 0
BRZ .Ins_Nop R1
BRZ .Ins_Nop R2
JMP .Scal_Getdirname_Loop
.Scal_Getdirname_End
RET

.Scal_NthString
ADD R3 R3 .VirtualRegisters
PSH R3
IMM R3 16
CAL .Ins_Pop
LLOD R2 .VirtualRegisters 16
IMM R3 16
PSH R2
CAL .Ins_Pop
POP R2
LLOD R7 .VirtualRegisters 16
POP R3
LOD R1 R3
BRZ .Scal_NthString_Success R7
.Scal_NthString_Loop
LOD R6 R1
INC R1 R1
BRZ .Scal_NthString_Error R6
BNE .Scal_NthString_Loop R6 R7
DEC R2 R2
BNZ .Scal_NthString_Loop R2
.Scal_NthString_Success
STR R3 R1
RET

.Scal_NthString_Error
BRZ .Scal_NthString_Success R7
STR .OSVar_ERROR 9
RET

.Scal_Flen
ADD R3 R3 .VirtualRegisters //me when pointer to a pointer to a pointer to a pointer
LOD R3 R3
ADD R3 R3 .FileDescriptors
LOD R3 R3
BRZ .Scal_Close_Error R3 //no open file
LLOD R3 R3 1
ADD R3 R3 2
IMM R8 0
.Scal_Flen_Loop
OUT %ADDR R3
IN R6 %BUS //segment len
ADD R8 R8 R6
DEC R3 R3
OUT %ADDR R3
IN R7 %BUS
BSR R7 R7 2 //remaining segments
BRZ .Scal_Flen_End R7
DEC R8 R8
DEC R6 R6
ADD R3 R3 2
OUT %ADDR R3
IN R7 %BUS //start of segment
ADD R7 R7 R6
OUT %ADDR R7
IN R6 %BUS //next segment header address
ADD R3 R6 2
JMP .Scal_Flen_Loop
.Scal_Flen_End
LSTR .VirtualRegisters 16 R8
IMM R3 16
CAL .Ins_Push
RET

.Scal_Error
STR .OSVar_ERROR 6
RET

//HELPER FUNCTIONS
.PrintString //r1 = string address
LOD R2 R1
BRZ .PrintString_Exit R2
OUT %TEXT R2
INC R1 R1
JMP .PrintString
.PrintString_Exit
RET

.END //final graceful exit routine
IMM R1 .OSVar_Restricted_EndingString
CAL .PrintString
HLT

.FindNextSpace
//R3 = amount of space
//TODO: count FFFFs to avoid eventual death
//TODO: merge blocks
//R4 = current address
//R6, R7, R8 = temp
IMM R4 0
IMM R8 0
.FNS_Loop
OUT %ADDR R4
IN R6 %BUS
BRZ .FNS_CheckBlock R6
BNE .FNS_Allocated R6 0xFFFF
INC R4 R4
JMP .FNS_Loop
.FNS_Allocated
IMM R8 0
//get next block location
ADD R4 R4 2
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R6
JMP .FNS_Loop
.FNS_CheckBlock
ADD R4 R4 2
OUT %ADDR R4
IN R6 %BUS
BRE .FNS_Error R6 0xFFFF
BNZ .FNS_Merge R8
.FNS_Merge_Ret
ADD R7 R6 4 //total size
BGE .FNS_Allocate R7 R3
//not big enough
SUB R8 R4 2 //update thingy
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R6
JMP .FNS_Loop
.FNS_Allocate
SUB R7 R7 R3 //extra space that exists
SUB R4 R4 2
PSH R4
ADD R4 R4 R3 //start of additional block
BGE .FNS_Allocate_BigBlock R7 4
BRZ .FNS_Allocate_EmptyBlock R7
OUT %ADDR R4
OUT %BUS 0xFFFF
INC R4 R4
DEC R7 R7
BNZ ~-4 R7
.FNS_Allocate_EmptyBlock
POP R4
PSH R4
ADD R4 R4 4
SUB R3 R3 4
BRZ .FNS_Allocate_End R3
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
DEC R3 R3
BNZ ~-4 R3
.FNS_Allocate_End
POP R4
RET

.FNS_Allocate_BigBlock
SUB R7 R7 4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
OUT %ADDR R4
OUT %BUS R7
INC R4 R4
OUT %ADDR R4
INC R4 R4
OUT %BUS R4
JMP .FNS_Allocate_EmptyBlock
.FNS_Merge
//R8 block + R4 block
//R4.len + R4.pos-R8.pos
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R7 %BUS
ADD R6 R6 R7
ADD R4 R8 3
OUT %ADDR R4
IN R7 %BUS
SUB R6 R6 R7
INC R6 R6
DEC R4 R4
OUT %ADDR R4
OUT %BUS R6
JMP .FNS_Merge_Ret
.FNS_Error
//this is very bad
//TODO: add some actual stuff here
HLT

//EXECUTIONSTUFF

.ContextSwitch
LOD R7 R5
BRZ .ContextSwitch_LodNextProc R7
LSTR R7 3 R4
LOD R8 .OSVar_SEEKOFFSET
LSTR R7 4 R8
LOD R8 .OSVar_ERROR
LSTR R7 6 R8
//STR Regs
ADD R7 R7 7
ADD R6 .VirtualRegisters 1
.ContextSwitch_StrRegLoop
CPY R7 R6
INC R6 R6
INC R7 R7
BLE .ContextSwitch_StrRegLoop R6 .VirtualRegisters_StackPointer
//LOD next proc
.ContextSwitch_LodNextProc
INC R5 R5
LOD R7 R5
BRE .ContextSwitch_Restartprocloop R7 0
.ContextSwitch_Restartprocloop_Return
LLOD R4 R7 3
LLOD R8 R7 4
STR .OSVar_SEEKOFFSET R8
LLOD R8 R7 6
STR .OSVar_ERROR R8
ADD R7 R7 7
ADD R6 .VirtualRegisters 1
.ContextSwitch_LodRegLoop
CPY R6 R7
INC R6 R6
INC R8 R8
INC R7 R7
BLE .ContextSwitch_LodRegLoop R6 .VirtualRegisters_StackPointer
RET

.ContextSwitch_Restartprocloop
IMM R5 .ProcessDescriptors
LOD R7 R5
BRZ .END R7
JMP .ContextSwitch_Restartprocloop_Return


.CreateStartingProc
IMM R3 16
LSTR 16 .VirtualRegisters 22
CAL .Scal_Malloc
LLOD R3 .VirtualRegisters 16
STR .ProcessDescriptors R3
STR R3 R0 //set PID to 0
LSTR R3 1 R4
OUT %ADDR 6
IN R5 %BUS
ADD R5 R4 R5
LSTR R3 2 R5
LSTR R3 3 R4
LSTR R3 4 R0
LSTR R3 5 R0
LSTR R3 6 R0
ADD R3 R3 7
ADD R5 R3 15
.CreateStartingProc_Loop
STR R3 R0
INC R3 R3
BRL .CreateStartingProc_Loop R3 R5
IMM R5 .ProcessDescriptors

.Exec_Loop
OUT %ADDR R4
IN R6 %BUS
//@DEBUG
BSR R3 R6 12
BSR R2 R6 8
BSR R1 R6 4
AND R2 R2 0xF
AND R1 R1 0xF
AND R6 R6 0xF
ADD R6 R6 .InstructionTable
LOD R6 R6
CAL R6
INC R4 R4
STR .VirtualRegisters R0 //keep R0 as 0
JMP .Exec_Loop