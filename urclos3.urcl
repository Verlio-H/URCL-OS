BITS 16
MINREG 10
MINHEAP 4096
MINSTACK 16
@DEFINE @PD_SIZE 23
//HEADERS

.stdinit_Initialize
OUT %ADDR 7 //load address of what should be the file executed on startup, if you delete this file you are dead dead on god
IN R4 %BUS
BRZ .stdinit_Initialize_NoBoot R4
STR .stdbase_OSVar_STARTUPPROG R4
STR .stdbase_OSVar_MALLOCSADDR M0

.stdinit_Initialize_Memory
SUB R5 @MINHEAP 2
BGE .stdinit_Initialize_ManyMemories R5 @SMAX
STR M0 R5
DEC R5 @MINHEAP
LSTR M0 R5 -1
JMP .stdbase_CreateStartingProc

.stdinit_Initialize_ManyMemories
DEC R5 @SMAX
STR M0 R5
SUB R5 @MINHEAP @MSB
DEC R5 R5
DEC R6 @MSB
LSTR M0 R6 R5
DEC R5 @MINHEAP
LSTR M0 R5 -1
JMP .stdbase_CreateStartingProc

.stdinit_Initialize_NoBoot
OUT %TEXT 'E'
OUT %TEXT 'r'
OUT %TEXT 'r'
OUT %TEXT 'o'
OUT %TEXT 'r'
RET
.stdbase_InstructionTable
DW .stdbase_Ins_Nop
DW .stdbase_Ins_Immediate // 1
DW .stdbase_Ins_Add // 2
DW .stdbase_Ins_Subtract // 3
DW .stdbase_Ins_And // 4
DW .stdbase_Ins_Nor // 5
DW .stdbase_Ins_ShiftLeft // 6
DW .stdbase_Ins_ShiftRight // 7
DW .stdbase_Ins_BranchIfGreaterThanOrEqual // 8
DW .stdbase_Ins_BranchIfEqual // 9
DW .stdmem_Ins_LoadMemory // 10
DW .stdmem_Ins_StoreMemory // 11
DW .stdmem_Ins_Push // 12
DW .stdmem_Ins_Pop // 13
DW .stdmem_Ins_BulkImmediate //14
DW .stdbase_Ins_SystemCall //15

.stdbase_SystemCalls
DW .stdbase_Scal_Exit //0
DW .silkfs_Scal_Creat //1
DW .silkfs_Scal_Open //2
DW .silkfs_Scal_Close //3
DW .silkfs_Scal_Read //4
DW .silkfs_Scal_Write //5
DW .silkfs_Scal_Lseek //6
DW .stdbase_Scal_Error //.Scal_Link //7
DW .stdbase_Scal_Error //.Scal_Unlink //8
DW .stdbase_Scal_Error //.Scal_Stat //9
DW .stdbase_Scal_Exec //10
DW .stdbase_Scal_Fork //11
DW .stdbase_Scal_GetPID //12
DW .stdbase_Scal_WaitPID //13
DW .stdbase_Scal_Error//DW .Scal_Kill //14
DW .stdbase_Scal_Chdir // //15
DW .stdbase_Scal_Error //.Scal_Stime //16
DW .stdbase_Scal_Error //.Scal_time //17
DW .silkfs_Scal_Rdir //18
DW .stdmem_Scal_Malloc //19
DW .stdmem_Scal_Free //20
DW .stdmem_Scal_Realloc //21
DW .stdio_Scal_Puts //22
DW .stdio_Scal_Putc //23
DW .stdio_Scal_Putci //24
DW .stdio_Scal_Gets //TODO: make non blocking //25
DW .stdio_Scal_Getc //TODO: make non blocking //26
DW .stdbase_Scal_Error //.Scal_Memcmp //27
DW .stdbase_Scal_Error //.Scal_Memcpy //28
DW .stdbase_Scal_Error //.Scal_Rand //29
DW .stdbase_Scal_Error //.Scal_Strcmp //30
DW .stdbase_Scal_Error //.Scal_Strcpy //31
DW .stdbase_Scal_Strlen //32
DW .stdbase_Scal_Lodosvar //33
DW .stdbase_Scal_Strosvar //34
DW .silkfs_Scal_Getdirname //35
DW .stdbase_Scal_NthString //36
DW .silkfs_Scal_Flen //37
//OSVARIABLES:
.stdbase_OSVar_CWD
DW 0 //CWD
.stdbase_OSVar_ROOT
DW 0
.stdbase_OSVar_PATH
DW 0 //configured on startup (/bin)
.stdbase_OSVar_SHELL
DW 0 //configured on startup (/bin/sh)
.stdbase_OSVar_ECHO
DW 1
.stdbase_OSVar_MEMLIMIT
//DW @HEAP
DW @MINHEAP //use this on bad emu that no have @HEAP (I am looking at you bram)
.stdbase_OSVar_BITS
DW @BITS
.stdbase_OSVar_MEM0
DW M0
.stdbase_OSVar_MALLOCSADDR
DW M0
.stdbase_OSVar_USERNAME
DW @MAX //configured on startup
.stdbase_OSVar_SEEKOFFSET
DW 0
.stdbase_OSVar_CPP
DW 0
.stdbase_OSVar_PROCNAME
DW 0 //write only
.stdbase_OSVar_EXIT
DW 0
.stdbase_OSVar_STARTUPPROG
DW 0
.stdbase_OSVar_ERROR
DW 0

//0 = successful
//1 = other
//2 = invalid directory
//3 = invalid operand
//4 = out of memory
//5 = out of disk space
//6 = invalid systemcall
//7 = invalid fd
//8 = invalid pid
//9 = substring not found
//10 = stack overflow
//11 = stack underflow
//12 = too many open files
//13 = invalid lseek offset
//14 = EOF

.stdbase_OSVar_Restricted_EndingString
DW [10 "halting..." 10 0]
.stdbase_OSVar_Restricted_CurrentFinalProc
DW .stdbase_ProcessDescriptors
.stdbase_OSVar_Restricted_NextPID
DW 1
.stdbase_OSVar_Restricted_Temp
DW 0
.stdbase_OSVar_Restricted_Temp2
DW 0

.stdbase_VirtualRegister
DW 0

DW 0
.stdbase_ProcessDescriptors //pointers to them
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0

//PROCESS descriptor format:
//PID
//START of program
//NAME of program (string pointer)
//CURRENT read address
//SEEK value
//STACK location
//ERROR status
//REGISTERS (0-15)

//MEMORY Block format:
//@MSB = allocated?
//REST = length

//FILE descriptor format:
//SEEK address
//FILE header addr
//CURRENT Segment end
//REMAINING segments



//INSTRUCTIONS
//OP1 = R3
//OP2 = R2
//OP3 = R1
//PC = R4
//CURRENTPROC = R5
//R6 = R8 = temp
NOP //to silence URCX
.stdbase_Ins_Nop
RET

.stdbase_Ins_Immediate
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
LSTR R3 R9 R6
RET

.stdbase_Ins_Add
LLOD R2 R2 R9
LLOD R1 R1 R9
ADD R1 R2 R1
LSTR R3 R9 R1
RET

.stdbase_Ins_Subtract
LLOD R2 R2 R9
LLOD R1 R1 R9
SUB R1 R2 R1
LSTR R3 R9 R1
RET

.stdbase_Ins_And
LLOD R2 R2 R9
LLOD R1 R1 R9
AND R1 R1 R2
LSTR R3 R9 R1
RET

.stdbase_Ins_Nor
LLOD R2 R2 R9
LLOD R1 R1 R9
NOR R1 R1 R2
LSTR R3 R9 R1
RET

.stdbase_Ins_ShiftLeft
LLOD R2 R2 R9
LLOD R1 R1 R9
BSL R1 R2 R1
LSTR R3 R9 R1
RET

.stdbase_Ins_ShiftRight
LLOD R2 R2 R9
LLOD R1 R1 R9
BSR R1 R2 R1
LSTR R3 R9 R1
RET

.stdbase_Ins_BranchIfGreaterThanOrEqual
LLOD R2 R2 R9
LLOD R1 R1 R9
BRL .stdbase_Ins_BranchIfGreaterThanOrEqual_NoBranch R2 R1
LLOD R3 R3 R9
LOD R6 R5 //pd pointer
LLOD R6 R6 1 //load start of program
ADD R4 R6 R3 //branc
DEC R4 R4
.stdbase_Ins_BranchIfGreaterThanOrEqual_NoBranch
RET

.stdbase_Ins_BranchIfEqual
LLOD R2 R2 R9
LLOD R1 R1 R9
BNE .stdbase_Ins_BranchIfEqual_NoBranch R2 R1
LLOD R3 R3 R9
LOD R6 R5 //pd pointer
LLOD R6 R6 1 //load start of program
ADD R4 R6 R3 //branc
DEC R4 R4
.stdbase_Ins_BranchIfEqual_NoBranch
RET

.stdbase_Ins_SystemCall
BSL R2 R2 4
OR R1 R1 R2
BRG .stdbase_Ins_SystemCall_InvalidSyscall R1 37
LLOD R1 R1 .stdbase_SystemCalls
CAL R1
RET

.stdbase_Ins_SystemCall_InvalidSyscall
STR .stdbase_OSVar_ERROR 6
RET

//SYSTEM CALLS
//R1 + R2 = temp
//OPERAND = R3
//PC = R4
//CURRENTPROC = R5
//R6 - R8 = temp

.stdbase_Scal_Exit
LLOD R3 R3 R9 //exit code
PSH R3
LOD R3 R5
DEC R3 R3
CAL .stdmem_Scal_Free_SkipGet
LOD R3 R5
LLOD R3 R3 5
BRZ ~+2 R3
CAL .stdmem_Scal_Free_SkipGet
POP R3
STR .stdbase_OSVar_EXIT R3
DEC R5 R5
LOD R1 R5 //the one before
INC R5 R5
BRZ .stdbase_END R1
LOD R1 .stdbase_OSVar_Restricted_CurrentFinalProc
DEC R1 R1
STR .stdbase_OSVar_Restricted_CurrentFinalProc R1
INC R1 R1
LOD R2 R1
STR R5 R2 //puts last into current
STR R1 0
//IMM R5 .stdbase_ProcessDescriptors
CAL .stdbase_ContextSwitch
RET

.stdbase_Scal_Exec
LLOD R4 R3 R9
LOD R1 R5
LSTR R1 1 R4 //update start of program
DEC R4 R4
RET

.stdbase_Scal_Fork
PSH R3
LOD R6 .stdbase_OSVar_Restricted_NextPID
LSTR R3 R9 R6
INC R6 R6
STR .stdbase_OSVar_Restricted_NextPID R6
SUB R3 .stdbase_VirtualRegister R9
STR .stdbase_VirtualRegister @PD_SIZE
CAL .stdmem_Scal_Malloc
LOD R3 .stdbase_VirtualRegister
LOD R7 .stdbase_OSVar_Restricted_CurrentFinalProc
INC R7 R7
STR .stdbase_OSVar_Restricted_CurrentFinalProc R7
STR R7 R3
LOD R6 .stdbase_OSVar_Restricted_NextPID
DEC R6 R6
STR R3 R6 //PID
INC R3 R3 //+1
LOD R1 R5
INC R1 R1
CPY R3 R1 //Start
INC R3 R3 //+2
STR R3 R0 //Name
INC R3 R3 //+3
STR R3 R4 //Read
INC R3 R3 //+4
ADD R1 R1 3
CPY R3 R1 //Seek
INC R1 R1
INC R3 R3 //+5
//STACK
LOD R6 R1
PSH R6
STR R3 R0
PSH R0
BRZ .stdbase_Scal_Fork_NoStack R6
PSH R3
PSH R1
PSH R6
SUB R3 .stdbase_VirtualRegister R9
STR .stdbase_VirtualRegister 64
CAL .stdmem_Scal_Malloc
LOD R2 .stdbase_VirtualRegister
POP R6
POP R1
POP R3
DEC R2 R2
POP R0
PSH R2
STR R3 R2
IMM R8 64
.stdbase_Scal_Fork_Copy
INC R2 R2
INC R6 R6
CPY R2 R6
DEC R8 R8
BNZ .stdbase_Scal_Fork_Copy R8
.stdbase_Scal_Fork_NoStack
INC R1 R1
INC R3 R3 //+6
CPY R3 R1 //Error
INC R3 R3
MOV R2 R0
MOV R1 R9
.stdbase_Scal_Fork_UpdateLoop
LOD R8 R1
STR R3 R8
INC R3 R3
INC R1 R1
INC R2 R2
BRL .stdbase_Scal_Fork_UpdateLoop R2 16
POP R2
POP R6
DEC R3 R3
SUB R8 R8 R6 //rebase sp
ADD R8 R8 R2
STR R3 R8
POP R1
SUB R3 R3 15
LSTR R3 R1 R0
RET


.stdbase_Scal_GetPID
ADD R3 R3 R9
LOD R1 R5
CPY R3 R1 //haha I use that 1 cisc instruction noob
RET

.stdbase_Scal_WaitPID
LLOD R3 R3 R9
IMM R2 .stdbase_ProcessDescriptors
.stdbase_Scal_WaitPID_CheckForPIDLoop
LOD R1 R2
BRZ .stdbase_Ins_Nop R1
LOD R1 R1
INC R2 R2
BNE .stdbase_Scal_WaitPID_CheckForPIDLoop R1 R3
DEC R4 R4 //if process exists dont move onto next word
CAL .stdbase_ContextSwitch
RET

.stdbase_Scal_Chdir
LLOD R3 R3 R9
STR .stdbase_OSVar_CWD R3
RET

.stdbase_Scal_Strlen
ADD R8 R3 R9
LOD R3 R8
IMM R1 -1
.stdbase_Scal_Strlen_Loop
LOD R7 R3
INC R3 R3
INC R1 R1
BNZ .stdbase_Scal_Strlen_Loop R7
STR R8 R1
RET

.stdbase_Scal_Lodosvar
LLOD R3 .stdbase_OSVar_CWD R3
STR .stdbase_VirtualRegister R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Push
RET

.stdbase_Scal_Strosvar
MOV R1 R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R3 .stdbase_VirtualRegister
LSTR .stdbase_OSVar_CWD R1 R3
RET

.stdbase_Scal_NthString
ADD R3 R3 R9
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R2 .stdbase_VirtualRegister
SUB R3 .stdbase_VirtualRegister R9
PSH R2
CAL .stdmem_Ins_Pop
POP R2
LOD R7 .stdbase_VirtualRegister
POP R3
LOD R1 R3
BRZ .stdbase_Scal_NthString_Success R7
.stdbase_Scal_NthString_Loop
LOD R6 R1
INC R1 R1
BRZ .stdbase_Scal_NthString_Error R6
BNE .stdbase_Scal_NthString_Loop R6 R7
DEC R2 R2
BNZ .stdbase_Scal_NthString_Loop R2
.stdbase_Scal_NthString_Success
STR R3 R1
RET

.stdbase_Scal_NthString_Error
BRZ .stdbase_Scal_NthString_Success R7
STR .stdbase_OSVar_ERROR 9
RET

.stdbase_Scal_Error
STR .stdbase_OSVar_ERROR 6
RET

//HELPER FUNCTIONS

//FINAL graceful exit routine
.stdbase_END
IMM R1 .stdbase_OSVar_Restricted_EndingString
CAL .stdio_PrintString //r1 = string address
HLT

//EXECUTIONSTUFF

.stdbase_ContextSwitch
MOV R10 R0
LOD R7 R5
BRZ .stdbase_ContextSwitch_LodNextProc R7
LSTR R7 3 R4
LOD R8 .stdbase_OSVar_SEEKOFFSET
LSTR R7 4 R8
LOD R8 .stdbase_OSVar_ERROR
LSTR R7 6 R8
//LOD next proc
.stdbase_ContextSwitch_LodNextProc
INC R5 R5
LOD R7 R5
BRE .stdio_ContextSwitch_Restartprocloop R7 0
.stdbase_ContextSwitch_Restartprocloop_Return
LLOD R4 R7 3
LLOD R8 R7 4
STR .stdbase_OSVar_SEEKOFFSET R8
LLOD R8 R7 6
STR .stdbase_OSVar_ERROR R8
ADD R9 R7 7
RET

.stdbase_CreateStartingProc
SUB R3 .stdbase_VirtualRegister R9
STR .stdbase_VirtualRegister @PD_SIZE
CAL .stdmem_Scal_Malloc
LOD R3 .stdbase_VirtualRegister
STR .stdbase_ProcessDescriptors R3
STR R3 R0 //set PID to 0
LSTR R3 1 R4
OUT %ADDR 6
IN R5 %BUS
ADD R5 R4 R5
LSTR R3 2 R5
LSTR R3 3 R4
LSTR R3 4 R0
LSTR R3 5 R0
LSTR R3 6 R0
ADD R9 R3 7 //R0
IMM R5 .stdbase_ProcessDescriptors
MOV R10 R0

.stdbase_Exec_Loop
OUT %ADDR R4
IN R6 %BUS
BSR R3 R6 12
BSR R2 R6 8
BSR R1 R6 4
AND R2 R2 0xF
AND R1 R1 0xF
AND R6 R6 0xF
ADD R6 R6 .stdbase_InstructionTable
LOD R6 R6
CAL R6
INC R4 R4
INC R10 R10
STR R9 R0 //keep R0 as 0
BLE .stdbase_Exec_Loop R10 255
DEC R4 R4
CAL .stdbase_ContextSwitch
JMP .stdbase_Exec_Loop

//STDIO
//USES standard urcl serial console

//DEFINES:
//SCAL_PUTS
//SCAL_PUTC
//SCAL_PUTCI
//SCAL_GETS
//SCAL_GETC
//SCAL_PRINTSTRING

.stdio_Scal_Puts
LLOD R1 R3 R9
CAL .stdio_PrintString
RET

.stdio_Scal_Putc
LLOD R3 R3 R9
OUT %TEXT R3
//OUT %HEX R3
//OUT %TEXT 0x20
RET

.stdio_Scal_Putci
INC R4 R4
OUT %ADDR R4
IN R3 %BUS
OUT %TEXT R3
RET

.stdio_Scal_Gets //TODO: make non blocking
LLOD R3 R3 R9
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R2 .stdbase_VirtualRegister
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R6 .stdbase_VirtualRegister
POP R3
BRZ .stdio_Scal_Gets_End R2
LOD R7 .stdbase_OSVar_ECHO
MOV R8 R2
.stdio_Scal_Gets_Loop
IN R1 %TEXT
BRE .stdio_Scal_Gets_End R1 R6
BRE .stdio_Scal_Gets_Backspace R1 8
BRE .stdio_Scal_Gets_Backspace R1 127
BRZ ~+2 R7
OUT %TEXT R1
STR R3 R1
INC R3 R3
DEC R2 R2
BNZ .stdio_Scal_Gets_Loop R2
.stdio_Scal_Gets_End
STR R3 R0
RET

.stdio_Scal_Gets_Backspace
BRE .stdio_Scal_Gets_Loop R8 R2
BRZ ~+2 R7
OUT %TEXT R1
DEC R3 R3
INC R2 R2
OUT %TEXT 0x1b
OUT %TEXT '['
OUT %TEXT '1'
OUT %TEXT 'D'
OUT %TEXT 0x1b
OUT %TEXT '['
OUT %TEXT 'K'
JMP .stdio_Scal_Gets_Loop

.stdio_Scal_Getc //TODO: make non blocking
IN R1 %TEXT
LSTR R3 R9 R1
RET

.stdio_PrintString //r1 = string address
LOD R2 R1
BRZ .stdio_PrintString_Exit R2
OUT %TEXT R2
INC R1 R1
JMP .stdio_PrintString
.stdio_PrintString_Exit
RET

.stdio_ContextSwitch_Restartprocloop
IMM R5 .stdbase_ProcessDescriptors //pointers to them
LOD R7 R5
BRZ .stdbase_END R7
JMP .stdbase_ContextSwitch_Restartprocloop_Return
//SILKFS
//STANDARD silk filesystem

//DEFINES:
//SCAL_CREAT
//SCAL_OPEN
//SCAL_CLOSE
//SCAL_READ
//SCAL_WRITE
//SCAL_LSEEK
//SCAL_RDIR
//SCAL_GETDIRNAME
//SCAL_FLEN


.silkfs_FileDescriptors
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW -1

NOP //to silence urcx
.silkfs_Scal_Creat
LLOD R3 R3 R9 //pointer to name string
//GET length
IMM R1 -2
PSH R3
.silkfs_Scal_Creat_NameLoop
LOD R2 R3
INC R3 R3
INC R1 R1
BNZ .silkfs_Scal_Creat_NameLoop R2
BRP ~+2 R1
MOV R1 R0 //in case someone trys to name a file "\0"
ADD R3 R1 20
PSH R4
CAL .silkfs_FindNextSpace
MOV R3 R4
POP R4
ADD R3 R3 3
OUT %ADDR R3
IN R6 %BUS
ADD R6 R6 R1
OUT %ADDR R3
OUT %BUS R6 //
STR .stdbase_OSVar_Restricted_Temp R6
DEC R3 R3
OUT %ADDR R3
OUT %BUS 16 //
DEC R3 R3
OUT %ADDR R3
OUT %BUS 0 //
DEC R3 R3
POP R6
BSL R7 R1 8
LOD R8 R6
ADD R7 R7 R8
OUT %ADDR R3
OUT %BUS R7 //
STR .stdbase_OSVar_Restricted_Temp2 R7
ADD R3 R3 4
INC R6 R6
.silkfs_Scal_Creat_SetNameLoop
BRZ .silkfs_Scal_Creat_SetNameLoop_End R1
LOD R8 R6
OUT %ADDR R3
OUT %BUS R8
INC R6 R6
INC R3 R3
DEC R1 R1
JMP .silkfs_Scal_Creat_SetNameLoop
.silkfs_Scal_Creat_SetNameLoop_End
//EXPAND CWD and insert
IMM R7 0
LOD R3 .stdbase_OSVar_CWD
.silkfs_Scal_Creat_UpdateDirLoop
//FOLLOW chain to find final block
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
//  check for remaining block header bit
BSR R6 R6 2
//      false -> end loop
BRZ .silkfs_Scal_Creat_UpdateDirLoop_End R6
//      true -> go to end and get next header
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
INC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R6 R6 R7
DEC R6 R6
OUT %ADDR R6
IN R3 %BUS
INC R7 R7
JMP .silkfs_Scal_Creat_UpdateDirLoop
.silkfs_Scal_Creat_UpdateDirLoop_End
//SET header in final block to mark it as not being final
IN R6 %BUS
OR R6 R6 4
OUT %BUS R6
BNZ .silkfs_Scal_Creat_NotFirst R7
BRE .silkfs_Scal_Creat_NotFirst R3 1
//  if block is first and addr != 0, subtract dir name length from addr (can be found from first thing in header)
DEC R3 R3
OUT %ADDR R3
IN R6 %BUS
BSR R6 R6 8
SUB R3 R3 R6
SUB R3 R3 3
OUT %ADDR R3
IN R6 %BUS
OR R6 R6 4
OUT %BUS R6
.silkfs_Scal_Creat_NotFirst
//FNS(9)
PSH R3
IMM R3 9
PSH R4
CAL .silkfs_FindNextSpace
MOV R8 R4
POP R4
POP R3
//END of block = header
ADD R3 R3 2 //points to starting addr
OUT %ADDR R3
IN R6 %BUS
DEC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R6 R6 R7
DEC R6 R6 //last word
OUT %ADDR R6
OUT %BUS R8
//HEADER[0] = '.'
OUT %ADDR R8
OUT %BUS '.'
//HEADER[1] = 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
//HEADER[2] = 5
INC R8 R8
OUT %ADDR R8
OUT %BUS 5
//HEADER[3] = header+4
INC R6 R8
INC R8 R6
OUT %ADDR R6
OUT %BUS R8
//HEADER[4,5,6,7] = stuff from earlier
LOD R6 .stdbase_OSVar_Restricted_Temp2
OUT %ADDR R8
OUT %BUS R6
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 16
INC R8 R8
LOD R6 .stdbase_OSVar_Restricted_Temp
OUT %ADDR R8
OUT %BUS R6
//HEADER[8] = 0
INC R8 R8
OUT %ADDR R8
OUT %BUS 0
RET

.silkfs_Scal_Open
PSH R4
PSH R3
ADD R3 R3 R9

LOD R6 .stdbase_OSVar_CWD
CAL .silkfs_Scal_Rdir_SkipSetup
//FIND next fd
IMM R1 .silkfs_FileDescriptors
.silkfs_Scal_Open_Loop
LOD R2 R1
INC R1 R1
BNZ .silkfs_Scal_Open_Loop R2
BRE .silkfs_Scal_Open_Error R2 -1
DEC R1 R1
POP R3
SUB R2 R1 .silkfs_FileDescriptors
LSTR R3 R9 R2
SUB R3 .stdbase_VirtualRegister R9
STR .stdbase_VirtualRegister 4
PSH R1
CAL .stdmem_Scal_Malloc
POP R1
LOD R4 .stdbase_VirtualRegister
STR R1 R4
MOV R1 R4
LOD R3 .stdbase_OSVar_Restricted_Temp
OUT %ADDR R3
IN R4 %BUS //location
STR R1 R4
SUB R3 R3 3 //start of file header
LSTR R1 1 R3
INC R3 R3
OUT %ADDR R3
IN R2 %BUS
BSR R2 R2 2 //number of remaining segments
LSTR R1 3 R2
INC R3 R3
OUT %ADDR R3
IN R2 %BUS //size of segment
ADD R2 R2 R4
DEC R2 R2
LSTR R1 2 R2
POP R4
RET

.silkfs_Scal_Open_Error
STR .stdbase_OSVar_ERROR 12
RET

.silkfs_Scal_Close
LLOD R3 R3 R9
ADD R3 R3 .silkfs_FileDescriptors
LOD R1 R3
BRZ .silkfs_Scal_Close_Error R1
DEC R1 R1
LOD R2 R1
AND R2 R2 @SMAX
STR R1 R2
INC R1 R1
STR R3 R0
RET

.silkfs_Scal_Close_Error
STR .stdbase_OSVar_ERROR 7
RET

.silkfs_Scal_Read
LLOD R3 R3 R9
PSH R3
ADD R3 R3 .silkfs_FileDescriptors
LOD R1 R3 //fd to read from
SUB R3 .stdbase_VirtualRegister R9
PSH R1
CAL .stdmem_Ins_Pop
POP R1
LOD R7 .stdbase_VirtualRegister //mem dest location
SUB R3 .stdbase_VirtualRegister R9
PSH R1
PSH R7
CAL .stdmem_Ins_Pop
POP R7
POP R1
LOD R6 .stdbase_VirtualRegister //amount to read
BRZ .silkfs_Scal_Close_Error R1
POP R3
BGE .silkfs_Scal_Close_Error R3 16
.silkfs_Scal_Read_Big_Loop
LOD R2 R1 //seek addr
LLOD R3 R1 2 //segment end
LLOD R8 R1 3 //segments remaining?
BRZ ~+2 R8
DEC R3 R3
ADD R8 R2 R6 //new seek address after
BRG .silkfs_Scal_Read_NoFullRead R8 R3 //too smol
STR .stdbase_OSVar_SEEKOFFSET R8
STR R1 R8
MOV R3 R8 //ending address
STR .stdbase_OSVar_Restricted_Temp R6
//WHILE (R2 <= R3) {
.silkfs_Scal_Read_Loop
OUT %ADDR R2
IN R8 %BUS
STR R7 R8
INC R7 R7
INC R2 R2
BRL .silkfs_Scal_Read_Loop R2 R3
LOD R3 .stdbase_OSVar_Restricted_Temp
BNE .silkfs_Scal_Read_NextSegment R3 R6
.silkfs_Scal_Read_End
LOD R3 .stdbase_OSVar_Restricted_Temp
STR .stdbase_VirtualRegister R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Push
RET

.silkfs_Scal_Read_NoFullRead
STR R7 0
INC R3 R3
STR R1 R3
STR .stdbase_OSVar_SEEKOFFSET R3
SUB R8 R3 R2
STR .stdbase_OSVar_Restricted_Temp R8
BNZ .silkfs_Scal_Read_Loop R8
ADD R6 R6 R3
.silkfs_Scal_Read_NextSegment
LLOD R8 R1 3
BRZ .silkfs_Scal_Read_End R8
SUB R6 R6 R3 //remaining
STR .stdbase_OSVar_Restricted_Temp R6
OUT %ADDR R2
IN R2 %BUS //new header
INC R2 R2
OUT %ADDR R2
IN R8 %BUS
BSR R8 R8 2
LSTR R1 3 R8 //remaining segment
INC R2 R2
OUT %ADDR R2
IN R8 %BUS //segment length
INC R2 R2
OUT %ADDR R2
IN R3 %BUS //segment start
STR R1 R3 //new seek
ADD R3 R3 R8
DEC R3 R3
LSTR R1 2 R3
JMP .silkfs_Scal_Read_Big_Loop

.silkfs_Scal_Write
PSH R4
//LOD DST
LLOD R3 R3 R9
ADD R3 R3 .silkfs_FileDescriptors
LOD R1 R3 //fd to read from
//LOD SRC
SUB R3 .stdbase_VirtualRegister R9
PSH R1
CAL .stdmem_Ins_Pop
POP R1
LOD R2 .stdbase_VirtualRegister
//LOD AMOUNT
SUB R3 .stdbase_VirtualRegister R9
PSH R1
PSH R2
CAL .stdmem_Ins_Pop
POP R2
POP R1
LOD R3 .stdbase_VirtualRegister
//PTR = DST.silkfs_START
LLOD R4 R1 1
ADD R7 R4 3
OUT %ADDR R7
IN R4 %BUS
//IF SEEK + AMOUNT >= PTR + DST.silkfs_LEN THEN1
.silkfs_Scal_Write_Next
LOD R6 R1 //seek
ADD R6 R6 R3
DEC R7 R7
OUT %ADDR R7
IN R7 %BUS
ADD R7 R4 R7
STR .stdbase_OSVar_Restricted_Temp 0
BRL .silkfs_Scal_Write_NoFrag R6 R7
//  AMOUNT = DST.silkfs_END - SEEK
LLOD R6 R1 2
LLOD R7 R1 3
BRZ ~+2 R7
DEC R6 R6 //might be something wrong here
LOD R7 R1
//  REMAINING = AMOUNT - NEWAMOUNT
SUB R6 R6 R7
SUB R8 R3 R6
DEC R8 R8 //no idea why this is necessary
MOV R3 R6
INC R3 R3
STR .stdbase_OSVar_Restricted_Temp 1
//  CREATFRAG = TRUE
.silkfs_Scal_Write_NoFrag
//PTR = SEEK
//WHILE PTR < SEEK + AMOUNT
LOD R4 R1
ADD R7 R4 R3
BGE .silkfs_Scal_Write_AfterLoop R4 R7
.silkfs_Scal_Write_Loop
//  CPY PTR SRC
LOD R6 R2
OUT %ADDR R4
OUT %BUS R6
//  INC SRC SRC
INC R2 R2
//  INC PTR PTR
INC R4 R4
BRL .silkfs_Scal_Write_Loop R4 R7
.silkfs_Scal_Write_AfterLoop
//LSEEK = PTR
STR R1 R4
LOD R6 .stdbase_OSVar_Restricted_Temp //creatfrag
BRZ .silkfs_Scal_Write_End R6
//IF CREATFRAG
//  IF frag exists
LLOD R6 R1 3
BRZ .silkfs_Scal_Write_NoFragExists R6
OUT %ADDR R4
IN R6 %BUS
INC R6 R6
OUT %ADDR R6
IN R7 %BUS
BSR R7 R7 2
LSTR R1 3 R7
INC R6 R6
OUT %ADDR R6
IN R7 %BUS
INC R6 R6
OUT %ADDR R6
IN R6 %BUS
ADD R7 R7 R6
DEC R7 R7
LSTR R1 2 R7
STR R1 R6
JMP .silkfs_Scal_Write_FragExists_Return
//  ELSE
//      UPDATE THE ORIGINAL HEADERS
.silkfs_Scal_Write_NoFragExists
LLOD R4 R1 1
INC R4 R4
.silkfs_Scal_Write_CreatFrag_FindEnd
OUT %ADDR R4
IN R3 %BUS
BSR R3 R3 2
BRZ .silkfs_Scal_Write_CreatFrag_FindEnd_End R3
INC R4 R4
OUT %ADDR R4
IN R3 %BUS
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R3 R3 R4
DEC R3 R3
OUT %ADDR R3
IN R4 %BUS
INC R4 R4
JMP .silkfs_Scal_Write_CreatFrag_FindEnd
.silkfs_Scal_Write_CreatFrag_FindEnd_End
IN R3 %BUS //update dir header
OR R3 R3 4
OUT %BUS R3
//UPDATE actual header
MOV R6 R4
DEC R6 R6
OUT %ADDR R6
IN R3 %BUS
BSR R3 R3 8
ADD R3 R3 3
ADD R6 R6 3
OUT %ADDR R6
IN R6 %BUS
SUB R6 R6 R3
//2ND word of actual header
OUT %ADDR R6
IN R3 %BUS
OR R3 R3 4
OUT %BUS R3
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R7 %BUS
ADD R7 R6 R7
DEC R7 R7 //pointer to last word

OUT %ADDR R7
IN R6 %BUS
//      FNS(5+REMAINING)
ADD R3 R8 5
PSH R3
PSH R8
PSH R6
PSH R7
PSH R2
CAL .silkfs_FindNextSpace
POP R2
POP R7
POP R6
POP R8
POP R3
SUB R3 R3 5
//      REPLACE LAST WORD WITH RESULT
OUT %ADDR R7
OUT %BUS R4
//      SET HEADERS
OUT %ADDR R4
OUT %BUS '.'
INC R4 R4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
INC R8 R8
OUT %ADDR R4
OUT %BUS R8
DEC R8 R8
INC R3 R4
INC R4 R3
OUT %ADDR R3
OUT %BUS R4
//      SET FIRST WORD TO LAST WORD OF PREVIOUS
OUT %ADDR R4
OUT %BUS R6
//  UPDATE SEEK
INC R4 R4
STR R1 R4
SUB R4 R4 5
LSTR R1 1 R4
ADD R4 R4 5
LSTR R1 3 0
//  UPDATE FD
ADD R6 R4 R8
DEC R6 R6
LSTR R1 2 R6
.silkfs_Scal_Write_FragExists_Return
//  AMOUNT = REMAINING
MOV R3 R8
//  JUMP BACK TO .silkfs_Scal_Write_NoFrag WITH REMAINING AS NEW AMOUNT, CREATFRAG AS FALSE
STR .stdbase_OSVar_Restricted_Temp 0
LLOD R4 R1 1
ADD R7 R4 3
LOD R4 R1
JMP .silkfs_Scal_Write_Next
.silkfs_Scal_Write_End
POP R4
RET

.silkfs_Scal_Lseek
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R1 .stdbase_VirtualRegister //file
ADD R1 R1 .silkfs_FileDescriptors
LOD R1 R1
LOD R2 R1
POP R3
ADD R3 R3 R9
LOD R3 R3 //offset
PSH R2
//CHECK if negative offset
.silkfs_Scal_Lseek_Loop
POP R2
PSH R2
ADD R2 R2 R3
//CHECK if exceeds end of fragment
LLOD R3 R1 2
LLOD R6 R1 3
BRZ ~+2 R6
DEC R3 R3
BLE .silkfs_Scal_Lseek_End R2 R3
//CHECK if remaining fragments
BRZ .silkfs_Scal_Lseek_EOF R6
//GET remaining amount
SUB R2 R2 R3
//GO to next fragment if available
INC R3 R3
OUT %ADDR R3
IN R3 %BUS
//UPDATE fd
LSTR R1 1 R3
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
BSR R6 R6 2 //remaining seg
LSTR R1 3 R6
INC R3 R3
OUT %ADDR R3
IN R6 %BUS
INC R3 R3
OUT %ADDR R3
IN R7 %BUS
ADD R7 R7 R6
LSTR R1 2 R7
//NEXT iteration
MOV R3 R2
JMP .silkfs_Scal_Lseek_Loop
.silkfs_Scal_Lseek_End
STR R1 R2
STR .stdbase_OSVar_SEEKOFFSET R2
POP R0
RET

.silkfs_Scal_Lseek_EOF
POP R0
STR .stdbase_OSVar_ERROR 14 //EOF error
//TODO: make this jump to the end of the file
RET

.silkfs_Scal_Rdir
STR .stdbase_OSVar_Restricted_Temp2 R4
ADD R3 R3 R9
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R6 .stdbase_VirtualRegister //R6 = default dir
BNE ~+2 R6 0xFFFF
LOD R6 .stdbase_OSVar_CWD
POP R3
.silkfs_Scal_Rdir_SkipSetup
PSH R3
LOD R3 R3
LOD R1 R3
PSH R0
BRZ .silkfs_Scal_Rdir_BadDir R1
POP R0
BRE .silkfs_Scal_Rdir_UseCWD R1 '.'
BRE .silkfs_Scal_Rdir_UseRoot R1 '/'
JMP .silkfs_Scal_Rdir_UseDefault

.silkfs_Scal_Rdir_UseCWD
LOD R2 .stdbase_OSVar_CWD
INC R3 R3
JMP .silkfs_Scal_Rdir_Start

.silkfs_Scal_Rdir_UseRoot
LOD R2 .stdbase_OSVar_ROOT
INC R3 R3
JMP .silkfs_Scal_Rdir_Start

.silkfs_Scal_Rdir_UseDefault
MOV R2 R6
.silkfs_Scal_Rdir_Start
ADD R2 R2 3
STR .stdbase_OSVar_Restricted_Temp R2
OUT %ADDR R2
IN R1 %BUS //dir start
DEC R2 R2
OUT %ADDR R2
IN R4 %BUS
ADD R4 R4 R1
DEC R4 R4
SUB R2 R2 2
LOD R1 R3
INC R3 R3
BRZ .silkfs_Scal_Rdir_FullPathInstant R1
BRE .silkfs_Scal_Rdir_Start R1 '/'
DEC R3 R3
PSH R3
PSH R0
.silkfs_Scal_Rdir_Loop
POP R0
POP R3
PSH R3
LOD R1 R3
OUT %ADDR R2
IN R6 %BUS
BRZ .silkfs_Scal_Rdir_BadDir R6
BRE .silkfs_Scal_Rdir_NextSeg R2 R4
ADD R2 R2 4
AND R7 R6 0xFF
PSH R0
BNE .silkfs_Scal_Rdir_Loop R7 R1
INC R3 R3
POP R0
BSR R6 R6 8
DEC R1 R2
STR .stdbase_OSVar_Restricted_Temp R1
OUT %ADDR R1
IN R7 %BUS //file addr
SUB R7 R7 R6
PSH R7
.silkfs_Scal_Rdir_CheckDirLoop
LOD R1 R3
SETE R7 R1 R0
SETE R8 R1 '/'
OR R7 R7 R8
SETE R8 R1 0x20 //damn you bram I spent like 15 minutes debugging this until I learned that ' ' was broken
OR R7 R7 R8 //if this == -1 then is end of current dir name
SETE R8 R6 R0 //if this == -1 then is end of search dir name
XNOR R7 R7 R8 //if are not equal then there is no match
BRZ .silkfs_Scal_Rdir_Loop R7
BRZ .silkfs_Scal_Rdir_FullPathFound R1
BRE .silkfs_Scal_Rdir_FullPathFound R1 0x20
BRE .silkfs_Scal_Rdir_DirectoryFound R1 '/'
POP R7
PSH R7
OUT %ADDR R7
IN R7 %BUS
BNE .silkfs_Scal_Rdir_Loop R1 R7
POP R7
INC R7 R7
PSH R7
INC R3 R3
DEC R6 R6
JMP .silkfs_Scal_Rdir_CheckDirLoop

.silkfs_Scal_Rdir_NextSeg
MOV R2 R6
ADD R2 R2 2
OUT %ADDR R2
IN R3 %BUS
INC R2 R2
OUT %ADDR R2
IN R4 %BUS
ADD R4 R4 R3
DEC R4 R4
INC R2 R2
PSH R0
JMP .silkfs_Scal_Rdir_Loop

.silkfs_Scal_Rdir_DirectoryFound
INC R3 R3
LOD R1 R3
BRZ .silkfs_Scal_Rdir_FullPathFound R1 //if ends with a / because yeah people do that sometimes
DEC R4 R2
OUT %ADDR R4
IN R2 %BUS
DEC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R2
DEC R4 R4
POP R0
POP R0
PSH R3
PSH R0
JMP .silkfs_Scal_Rdir_Loop

.silkfs_Scal_Rdir_FullPathFound
DEC R2 R2
POP R0
POP R0
OUT %ADDR R2
IN R2 %BUS
.silkfs_Scal_Rdir_FullPathInstant
POP R3 //original R3
STR R3 R2
LOD R4 .stdbase_OSVar_Restricted_Temp2
RET

.silkfs_Scal_Rdir_BadDir
STR .stdbase_OSVar_ERROR 2
POP R0
POP R0
LOD R4 .stdbase_OSVar_Restricted_Temp2
RET

.silkfs_Scal_Getdirname
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R2 .stdbase_VirtualRegister //max length
DEC R2 R2
POP R3
ADD R3 R3 R9
LOD R3 R3
BRZ .stdbase_Ins_Nop R2
LOD R1 .stdbase_OSVar_CWD
ADD R6 R1 3
OUT %ADDR R6
IN R6 %BUS
OUT %ADDR R1
IN R1 %BUS
AND R7 R1 0xFF
STR R3 R7
INC R3 R3
STR R3 0
DEC R2 R2
BSR R1 R1 8
BRZ .stdbase_Ins_Nop R1
SUB R6 R6 R1 //start of name
.silkfs_Scal_Getdirname_Loop
BRZ .stdbase_Ins_Nop R2
OUT %ADDR R6
IN R8 %BUS
STR R3 R8
DEC R2 R2
DEC R1 R1
INC R6 R6
INC R3 R3
STR R3 0
BRZ .stdbase_Ins_Nop R1
BRZ .stdbase_Ins_Nop R2
JMP .silkfs_Scal_Getdirname_Loop
.silkfs_Scal_Getdirname_End
RET

.silkfs_Scal_Flen
LLOD R3 R3 R9 //me when pointer to a pointer to a pointer to a pointer
ADD R3 R3 .silkfs_FileDescriptors
LOD R3 R3
BRZ .silkfs_Scal_Close_Error R3 //no open file
LLOD R3 R3 1
ADD R3 R3 2
IMM R8 0
.silkfs_Scal_Flen_Loop
OUT %ADDR R3
IN R6 %BUS //segment len
ADD R8 R8 R6
DEC R3 R3
OUT %ADDR R3
IN R7 %BUS
BSR R7 R7 2 //remaining segments
BRZ .silkfs_Scal_Flen_End R7
DEC R8 R8
DEC R6 R6
ADD R3 R3 2
OUT %ADDR R3
IN R7 %BUS //start of segment
ADD R7 R7 R6
OUT %ADDR R7
IN R6 %BUS //next segment header address
ADD R3 R6 2
JMP .silkfs_Scal_Flen_Loop
.silkfs_Scal_Flen_End
STR .stdbase_VirtualRegister R8
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Push
RET

.silkfs_FindNextSpace
//R3 = amount of space
//TODO: count FFFFs to avoid eventual death
//TODO: merge blocks
//R4 = current address
//R6, R7, R8 = temp
IMM R4 0
IMM R8 0
.silkfs_FNS_Loop
OUT %ADDR R4
IN R6 %BUS
BRZ .silkfs_FNS_CheckBlock R6
BNE .silkfs_FNS_Allocated R6 0xFFFF
INC R4 R4
JMP .silkfs_FNS_Loop
.silkfs_FNS_Allocated
IMM R8 0
//GET next block location
ADD R4 R4 2
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R6
JMP .silkfs_FNS_Loop
.silkfs_FNS_CheckBlock
ADD R4 R4 2
OUT %ADDR R4
IN R6 %BUS
BRE .silkfs_FNS_Error R6 0xFFFF
BNZ .silkfs_FNS_Merge R8
.silkfs_FNS_Merge_Ret
ADD R7 R6 4 //total size
BGE .silkfs_FNS_Allocate R7 R3
//NOT big enough
SUB R8 R4 2 //update thingy
INC R4 R4
OUT %ADDR R4
IN R4 %BUS
ADD R4 R4 R6
JMP .silkfs_FNS_Loop
.silkfs_FNS_Allocate
SUB R7 R7 R3 //extra space that exists
SUB R4 R4 2
PSH R4
ADD R4 R4 R3 //start of additional block
BGE .silkfs_FNS_Allocate_BigBlock R7 4
BRZ .silkfs_FNS_Allocate_EmptyBlock R7
OUT %ADDR R4
OUT %BUS 0xFFFF
INC R4 R4
DEC R7 R7
BNZ ~-4 R7
.silkfs_FNS_Allocate_EmptyBlock
POP R4
PSH R4
ADD R4 R4 4
SUB R3 R3 4
BRZ .silkfs_FNS_Allocate_End R3
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
DEC R3 R3
BNZ ~-4 R3
.silkfs_FNS_Allocate_End
POP R4
RET

.silkfs_FNS_Allocate_BigBlock
SUB R7 R7 4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
OUT %ADDR R4
OUT %BUS 0
INC R4 R4
OUT %ADDR R4
OUT %BUS R7
INC R7 R4
INC R4 R7
OUT %ADDR R7
OUT %BUS R4
JMP .silkfs_FNS_Allocate_EmptyBlock
.silkfs_FNS_Merge
//R8 block + R4 block
//R4.LEN + R4.silkfs_pos-R8.silkfs_pos
OUT %ADDR R4
IN R6 %BUS
INC R4 R4
OUT %ADDR R4
IN R7 %BUS
ADD R6 R6 R7
ADD R4 R8 3
OUT %ADDR R4
IN R7 %BUS
SUB R6 R6 R7
INC R6 R6
DEC R4 R4
OUT %ADDR R4
OUT %BUS R6
JMP .silkfs_FNS_Merge_Ret
.silkfs_FNS_Error
//THIS is very bad
//TODO: add some actual stuff here
HLT
//STDMEM
//NO virtual memory

//DEFINES:
//INS_LOADMEMORY
//INS_STOREMEMORY
//INS_PUSH
//INS_POP
//INS_BULKIMMEDIATE
//SCAL_MALLOC
//SCAL_FREE
//SCAL_FREE_SKIPGET
//SCAL_REALLOC

.stdmem_Ins_LoadMemory
LLOD R2 R2 R9
ADD R3 R3 R9
CPY R3 R2
RET

.stdmem_Ins_StoreMemory
LLOD R3 R3 R9
ADD R2 R2 R9
CPY R3 R2
RET


.stdmem_Ins_Push
LLOD R3 R3 R9
LOD R6 R5
LLOD R7 R6 5 //stack location
BRZ .stdmem_Ins_Push_CreateStack R7
ADD R8 R7 64 //R8 = stack cap
LLOD R6 R9 15
BGE .stdmem_Ins_Push_StackOverflow R6 R8
BRL .stdmem_Ins_Push_StackUnderflow R6 R7
.stdmem_Ins_Push_CreateStack_Ret
INC R6 R6
STR R6 R3
LSTR R9 15 R6
RET

.stdmem_Ins_Push_CreateStack
STR .stdbase_VirtualRegister 64
PSH R3
SUB R3 .stdbase_VirtualRegister R9
PSH R6
CAL .stdmem_Scal_Malloc
POP R6
POP R3
LOD R7 .stdbase_VirtualRegister //address
DEC R7 R7
LSTR R6 5 R7
MOV R6 R7
JMP .stdmem_Ins_Push_CreateStack_Ret


.stdmem_Ins_Push_StackOverflow
STR .stdbase_OSVar_ERROR 10
RET

.stdmem_Ins_Push_StackUnderflow
STR .stdbase_OSVar_ERROR 11
RET

.stdmem_Ins_Pop
LOD R6 R5
LLOD R6 R6 5 //stack location
BRZ .stdmem_Ins_Push_StackUnderflow R6
ADD R7 R6 64
LLOD R8 R9 15
BRG .stdmem_Ins_Push_StackOverflow R8 R7
BLE .stdmem_Ins_Push_StackUnderflow R8 R6
ADD R3 R3 R9
CPY R3 R8
DEC R8 R8
LSTR R9 15 R8
RET

.stdmem_Ins_BulkImmediate
LLOD R3 R3 R9
.stdmem_Ins_BulkImmediate_Loop
INC R4 R4
OUT %ADDR R4
IN R6 %BUS
STR R3 R6
INC R3 R3
BNZ .stdmem_Ins_BulkImmediate_Loop R6
RET

.stdmem_Scal_Malloc
ADD R3 R3 R9
PSH R3
LOD R3 R3 //malloc size
BGE .stdmem_Scal_Malloc_InvalidOp R3 @SMAX
LOD R1 .stdbase_OSVar_MALLOCSADDR
PSH R0
.stdmem_Scal_Malloc_Loop
MOV R7 R1
LOD R1 R1
BRE .stdmem_Scal_Malloc_EOM R1 @MAX
AND R2 R1 @SMAX
AND R6 R1 @MSB
MOV R1 R7
BRZ .stdmem_Scal_Malloc_Attempt R6
.stdmem_Scal_Malloc_Attempt_Return
ADD R1 R1 R2
INC R1 R1
JMP .stdmem_Scal_Malloc_Loop

.stdmem_Scal_Malloc_Attempt
BRL .stdmem_Scal_Malloc_Checkformerge R2 R3
OR R6 R3 @MSB
STR R1 R6
POP R0
POP R6
INC R1 R1
STR R6 R1 //return address of yeah
BRE .stdmem_Scal_Malloc_Success R2 R3
ADD R1 R1 R3
SUB R2 R2 R3
DEC R2 R2
STR R1 R2
INC R1 R1
.stdmem_Scal_Malloc_Success
DEC R1 R1
STR .stdbase_OSVar_MALLOCSADDR R1
RET

.stdmem_Scal_Malloc_Checkformerge
MOV R7 R1
ADD R1 R1 R2
INC R1 R1
LOD R6 R1
BRN .stdmem_Scal_Malloc_Loop R6
ADD R2 R2 R6
INC R2 R2
BGE .stdmem_Scal_Malloc_Loop R2 @SMAX //if combined are too big then don't merge
MOV R1 R7
STR R1 R2
JMP .stdmem_Scal_Malloc_Loop

.stdmem_Scal_Malloc_EOM
POP R1
BGE .stdmem_Scal_Malloc_OOM R1 1
INC R1 R1
PSH R1
IMM R1 M0
JMP .stdmem_Scal_Malloc_Loop

.stdmem_Scal_Malloc_OOM
STR .stdbase_OSVar_ERROR 4
POP R0
POP R0
RET

.stdmem_Scal_Malloc_InvalidOp
STR .stdbase_OSVar_ERROR 3
POP R0
POP R0
RET

.stdmem_Scal_Free
LLOD R3 R3 R9
DEC R3 R3
.stdmem_Scal_Free_SkipGet
LOD R1 R3
AND R1 R1 @SMAX
STR R3 R1
RET

.stdmem_Scal_Realloc
ADD R3 R3 R9
PSH R3
LOD R3 R3 //size
PSH R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Ins_Pop
LOD R6 .stdbase_VirtualRegister //address
POP R3
DEC R6 R6
LOD R2 R6
AND R2 R2 0x7FFF
//IF the new size is less than current size, then split
BRG .stdmem_Scal_Realloc_expand R3 R2
SUB R2 R2 R3
DEC R2 R2
BRN .stdmem_Scal_Realloc_end R2
OR R3 R3 0x8000
STR R6 R3
ADD R6 R6 R3
INC R6 R6
STR R6 R2
STR .stdbase_OSVar_MALLOCSADDR R6
JMP .stdmem_Scal_Realloc_end
//R7 = next part address
.stdmem_Scal_Realloc_expand
ADD R7 R6 R2
INC R7 R7
LOD R8 R7
BRN .stdmem_Scal_Realloc_Remalloc R8
SUB R1 R3 R2
DEC R1 R1
BRL .stdmem_Scal_Realloc_Remalloc R8 R1
OR R3 R3 0x8000
STR R6 R3
BRE .stdmem_Scal_Realloc_end R8 R3
ADD R7 R7 R1 //newaddr = nextaddr + R1 + 1
INC R7 R7
STR .stdbase_OSVar_MALLOCSADDR R7
SUB R8 R8 R1 //newsize = prevsize - R1 - 1
DEC R8 R8
STR R7 R8
.stdmem_Scal_Realloc_end
POP R3
INC R6 R6
STR R3 R6
RET

.stdmem_Scal_Realloc_Remalloc
PSH R6
PSH R2
STR .stdbase_VirtualRegister R3
SUB R3 .stdbase_VirtualRegister R9
CAL .stdmem_Scal_Malloc
LOD R7 .stdbase_VirtualRegister
POP R2
POP R6
POP R3
STR R3 R7
//UNALLOC original (this should go after if I ever multithread the kernel but in this case it saves like 1 operation so)
STR R6 R2
//COPY data
INC R6 R6
MOV R8 R7
.stdmem_Scal_Realloc_CopyLoop
CPY R7 R6
INC R7 R7
INC R6 R6
DEC R2 R2
BNZ .stdmem_Scal_Realloc_CopyLoop R2

RET

